{"ast":null,"code":"'use strict';\n\nlet {\n  SourceMapConsumer,\n  SourceMapGenerator\n} = require('source-map-js');\nlet {\n  dirname,\n  relative,\n  resolve,\n  sep\n} = require('path');\nlet {\n  pathToFileURL\n} = require('url');\nlet Input = require('./input');\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);\nlet pathAvailable = Boolean(dirname && resolve && relative && sep);\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify;\n    this.mapOpts = opts.map || {};\n    this.root = root;\n    this.opts = opts;\n    this.css = cssString;\n    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;\n    this.memoizedFileURLs = new Map();\n    this.memoizedPaths = new Map();\n    this.memoizedURLs = new Map();\n  }\n  addAnnotation() {\n    let content;\n    if (this.isInline()) {\n      content = 'data:application/json;base64,' + this.toBase64(this.map.toString());\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation;\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root);\n    } else {\n      content = this.outputFile() + '.map';\n    }\n    let eol = '\\n';\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n';\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */';\n  }\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file));\n      let root = prev.root || dirname(prev.file);\n      let map;\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text);\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null);\n        }\n      } else {\n        map = prev.consumer();\n      }\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)));\n    }\n  }\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return;\n    if (this.root) {\n      let node;\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i];\n        if (node.type !== 'comment') continue;\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i);\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '');\n    }\n  }\n  generate() {\n    this.clearAnnotation();\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap();\n    } else {\n      let result = '';\n      this.stringify(this.root, i => {\n        result += i;\n      });\n      return [result];\n    }\n  }\n  generateMap() {\n    if (this.root) {\n      this.generateString();\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer();\n      prev.file = this.outputFile();\n      this.map = SourceMapGenerator.fromSourceMap(prev);\n    } else {\n      this.map = new SourceMapGenerator({\n        file: this.outputFile()\n      });\n      this.map.addMapping({\n        generated: {\n          column: 0,\n          line: 1\n        },\n        original: {\n          column: 0,\n          line: 1\n        },\n        source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : '<no source>'\n      });\n    }\n    if (this.isSourcesContent()) this.setSourcesContent();\n    if (this.root && this.previous().length > 0) this.applyPrevMaps();\n    if (this.isAnnotation()) this.addAnnotation();\n    if (this.isInline()) {\n      return [this.css];\n    } else {\n      return [this.css, this.map];\n    }\n  }\n  generateString() {\n    this.css = '';\n    this.map = new SourceMapGenerator({\n      file: this.outputFile()\n    });\n    let line = 1;\n    let column = 1;\n    let noSource = '<no source>';\n    let mapping = {\n      generated: {\n        column: 0,\n        line: 0\n      },\n      original: {\n        column: 0,\n        line: 0\n      },\n      source: ''\n    };\n    let lines, last;\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str;\n      if (node && type !== 'end') {\n        mapping.generated.line = line;\n        mapping.generated.column = column - 1;\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node);\n          mapping.original.line = node.source.start.line;\n          mapping.original.column = node.source.start.column - 1;\n          this.map.addMapping(mapping);\n        } else {\n          mapping.source = noSource;\n          mapping.original.line = 1;\n          mapping.original.column = 0;\n          this.map.addMapping(mapping);\n        }\n      }\n      lines = str.match(/\\n/g);\n      if (lines) {\n        line += lines.length;\n        last = str.lastIndexOf('\\n');\n        column = str.length - last;\n      } else {\n        column += str.length;\n      }\n      if (node && type !== 'start') {\n        let p = node.parent || {\n          raws: {}\n        };\n        let childless = node.type === 'decl' || node.type === 'atrule' && !node.nodes;\n        if (!childless || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node);\n            mapping.original.line = node.source.end.line;\n            mapping.original.column = node.source.end.column - 1;\n            mapping.generated.line = line;\n            mapping.generated.column = column - 2;\n            this.map.addMapping(mapping);\n          } else {\n            mapping.source = noSource;\n            mapping.original.line = 1;\n            mapping.original.column = 0;\n            mapping.generated.line = line;\n            mapping.generated.column = column - 1;\n            this.map.addMapping(mapping);\n          }\n        }\n      }\n    });\n  }\n  isAnnotation() {\n    if (this.isInline()) {\n      return true;\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation;\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation);\n    }\n    return true;\n  }\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline;\n    }\n    let annotation = this.mapOpts.annotation;\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false;\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline);\n    }\n    return true;\n  }\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map;\n    }\n    return this.previous().length > 0;\n  }\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent;\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent());\n    }\n    return true;\n  }\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to);\n    } else if (this.opts.from) {\n      return this.path(this.opts.from);\n    } else {\n      return 'to.css';\n    }\n  }\n  path(file) {\n    if (this.mapOpts.absolute) return file;\n    if (file.charCodeAt(0) === 60 /* `<` */) return file;\n    if (/^\\w+:\\/\\//.test(file)) return file;\n    let cached = this.memoizedPaths.get(file);\n    if (cached) return cached;\n    let from = this.opts.to ? dirname(this.opts.to) : '.';\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation));\n    }\n    let path = relative(from, file);\n    this.memoizedPaths.set(file, path);\n    return path;\n  }\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = [];\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map;\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map);\n            }\n          }\n        });\n      } else {\n        let input = new Input(this.css, this.opts);\n        if (input.map) this.previousMaps.push(input.map);\n      }\n    }\n    return this.previousMaps;\n  }\n  setSourcesContent() {\n    let already = {};\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from;\n          if (from && !already[from]) {\n            already[from] = true;\n            let fromUrl = this.usesFileUrls ? this.toFileUrl(from) : this.toUrl(this.path(from));\n            this.map.setSourceContent(fromUrl, node.source.input.css);\n          }\n        }\n      });\n    } else if (this.css) {\n      let from = this.opts.from ? this.toUrl(this.path(this.opts.from)) : '<no source>';\n      this.map.setSourceContent(from, this.css);\n    }\n  }\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from);\n    } else if (this.usesFileUrls) {\n      return this.toFileUrl(node.source.input.from);\n    } else {\n      return this.toUrl(this.path(node.source.input.from));\n    }\n  }\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64');\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)));\n    }\n  }\n  toFileUrl(path) {\n    let cached = this.memoizedFileURLs.get(path);\n    if (cached) return cached;\n    if (pathToFileURL) {\n      let fileURL = pathToFileURL(path).toString();\n      this.memoizedFileURLs.set(path, fileURL);\n      return fileURL;\n    } else {\n      throw new Error('`map.absolute` option is not available in this PostCSS build');\n    }\n  }\n  toUrl(path) {\n    let cached = this.memoizedURLs.get(path);\n    if (cached) return cached;\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/');\n    }\n    let url = encodeURI(path).replace(/[#?]/g, encodeURIComponent);\n    this.memoizedURLs.set(path, url);\n    return url;\n  }\n}\nmodule.exports = MapGenerator;","map":{"version":3,"names":["SourceMapConsumer","SourceMapGenerator","require","dirname","relative","resolve","sep","pathToFileURL","Input","sourceMapAvailable","Boolean","pathAvailable","MapGenerator","constructor","stringify","root","opts","cssString","mapOpts","map","css","usesFileUrls","from","absolute","memoizedFileURLs","Map","memoizedPaths","memoizedURLs","addAnnotation","content","isInline","toBase64","toString","annotation","to","outputFile","eol","includes","applyPrevMaps","prev","previous","toUrl","path","file","sourcesContent","text","consumer","applySourceMap","clearAnnotation","node","i","nodes","length","type","indexOf","removeChild","replace","generate","isMap","generateMap","result","generateString","fromSourceMap","addMapping","generated","column","line","original","source","isSourcesContent","setSourcesContent","isAnnotation","noSource","mapping","lines","last","str","start","sourcePath","match","lastIndexOf","p","parent","raws","childless","semicolon","end","some","inline","withContent","charCodeAt","test","cached","get","set","previousMaps","walk","input","push","already","fromUrl","toFileUrl","setSourceContent","Buffer","window","btoa","unescape","encodeURIComponent","fileURL","Error","url","encodeURI","module","exports"],"sources":["D:/CNPM/Smart-Printing-Service/frontend/node_modules/postcss/lib/map-generator.js"],"sourcesContent":["'use strict'\r\n\r\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\r\nlet { dirname, relative, resolve, sep } = require('path')\r\nlet { pathToFileURL } = require('url')\r\n\r\nlet Input = require('./input')\r\n\r\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\r\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\r\n\r\nclass MapGenerator {\r\n  constructor(stringify, root, opts, cssString) {\r\n    this.stringify = stringify\r\n    this.mapOpts = opts.map || {}\r\n    this.root = root\r\n    this.opts = opts\r\n    this.css = cssString\r\n    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute\r\n\r\n    this.memoizedFileURLs = new Map()\r\n    this.memoizedPaths = new Map()\r\n    this.memoizedURLs = new Map()\r\n  }\r\n\r\n  addAnnotation() {\r\n    let content\r\n\r\n    if (this.isInline()) {\r\n      content =\r\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\r\n    } else if (typeof this.mapOpts.annotation === 'string') {\r\n      content = this.mapOpts.annotation\r\n    } else if (typeof this.mapOpts.annotation === 'function') {\r\n      content = this.mapOpts.annotation(this.opts.to, this.root)\r\n    } else {\r\n      content = this.outputFile() + '.map'\r\n    }\r\n    let eol = '\\n'\r\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\r\n\r\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\r\n  }\r\n\r\n  applyPrevMaps() {\r\n    for (let prev of this.previous()) {\r\n      let from = this.toUrl(this.path(prev.file))\r\n      let root = prev.root || dirname(prev.file)\r\n      let map\r\n\r\n      if (this.mapOpts.sourcesContent === false) {\r\n        map = new SourceMapConsumer(prev.text)\r\n        if (map.sourcesContent) {\r\n          map.sourcesContent = map.sourcesContent.map(() => null)\r\n        }\r\n      } else {\r\n        map = prev.consumer()\r\n      }\r\n\r\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\r\n    }\r\n  }\r\n\r\n  clearAnnotation() {\r\n    if (this.mapOpts.annotation === false) return\r\n\r\n    if (this.root) {\r\n      let node\r\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\r\n        node = this.root.nodes[i]\r\n        if (node.type !== 'comment') continue\r\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\r\n          this.root.removeChild(i)\r\n        }\r\n      }\r\n    } else if (this.css) {\r\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\r\n    }\r\n  }\r\n\r\n  generate() {\r\n    this.clearAnnotation()\r\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\r\n      return this.generateMap()\r\n    } else {\r\n      let result = ''\r\n      this.stringify(this.root, i => {\r\n        result += i\r\n      })\r\n      return [result]\r\n    }\r\n  }\r\n\r\n  generateMap() {\r\n    if (this.root) {\r\n      this.generateString()\r\n    } else if (this.previous().length === 1) {\r\n      let prev = this.previous()[0].consumer()\r\n      prev.file = this.outputFile()\r\n      this.map = SourceMapGenerator.fromSourceMap(prev)\r\n    } else {\r\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\r\n      this.map.addMapping({\r\n        generated: { column: 0, line: 1 },\r\n        original: { column: 0, line: 1 },\r\n        source: this.opts.from\r\n          ? this.toUrl(this.path(this.opts.from))\r\n          : '<no source>'\r\n      })\r\n    }\r\n\r\n    if (this.isSourcesContent()) this.setSourcesContent()\r\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\r\n    if (this.isAnnotation()) this.addAnnotation()\r\n\r\n    if (this.isInline()) {\r\n      return [this.css]\r\n    } else {\r\n      return [this.css, this.map]\r\n    }\r\n  }\r\n\r\n  generateString() {\r\n    this.css = ''\r\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\r\n\r\n    let line = 1\r\n    let column = 1\r\n\r\n    let noSource = '<no source>'\r\n    let mapping = {\r\n      generated: { column: 0, line: 0 },\r\n      original: { column: 0, line: 0 },\r\n      source: ''\r\n    }\r\n\r\n    let lines, last\r\n    this.stringify(this.root, (str, node, type) => {\r\n      this.css += str\r\n\r\n      if (node && type !== 'end') {\r\n        mapping.generated.line = line\r\n        mapping.generated.column = column - 1\r\n        if (node.source && node.source.start) {\r\n          mapping.source = this.sourcePath(node)\r\n          mapping.original.line = node.source.start.line\r\n          mapping.original.column = node.source.start.column - 1\r\n          this.map.addMapping(mapping)\r\n        } else {\r\n          mapping.source = noSource\r\n          mapping.original.line = 1\r\n          mapping.original.column = 0\r\n          this.map.addMapping(mapping)\r\n        }\r\n      }\r\n\r\n      lines = str.match(/\\n/g)\r\n      if (lines) {\r\n        line += lines.length\r\n        last = str.lastIndexOf('\\n')\r\n        column = str.length - last\r\n      } else {\r\n        column += str.length\r\n      }\r\n\r\n      if (node && type !== 'start') {\r\n        let p = node.parent || { raws: {} }\r\n        let childless =\r\n          node.type === 'decl' || (node.type === 'atrule' && !node.nodes)\r\n        if (!childless || node !== p.last || p.raws.semicolon) {\r\n          if (node.source && node.source.end) {\r\n            mapping.source = this.sourcePath(node)\r\n            mapping.original.line = node.source.end.line\r\n            mapping.original.column = node.source.end.column - 1\r\n            mapping.generated.line = line\r\n            mapping.generated.column = column - 2\r\n            this.map.addMapping(mapping)\r\n          } else {\r\n            mapping.source = noSource\r\n            mapping.original.line = 1\r\n            mapping.original.column = 0\r\n            mapping.generated.line = line\r\n            mapping.generated.column = column - 1\r\n            this.map.addMapping(mapping)\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  isAnnotation() {\r\n    if (this.isInline()) {\r\n      return true\r\n    }\r\n    if (typeof this.mapOpts.annotation !== 'undefined') {\r\n      return this.mapOpts.annotation\r\n    }\r\n    if (this.previous().length) {\r\n      return this.previous().some(i => i.annotation)\r\n    }\r\n    return true\r\n  }\r\n\r\n  isInline() {\r\n    if (typeof this.mapOpts.inline !== 'undefined') {\r\n      return this.mapOpts.inline\r\n    }\r\n\r\n    let annotation = this.mapOpts.annotation\r\n    if (typeof annotation !== 'undefined' && annotation !== true) {\r\n      return false\r\n    }\r\n\r\n    if (this.previous().length) {\r\n      return this.previous().some(i => i.inline)\r\n    }\r\n    return true\r\n  }\r\n\r\n  isMap() {\r\n    if (typeof this.opts.map !== 'undefined') {\r\n      return !!this.opts.map\r\n    }\r\n    return this.previous().length > 0\r\n  }\r\n\r\n  isSourcesContent() {\r\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\r\n      return this.mapOpts.sourcesContent\r\n    }\r\n    if (this.previous().length) {\r\n      return this.previous().some(i => i.withContent())\r\n    }\r\n    return true\r\n  }\r\n\r\n  outputFile() {\r\n    if (this.opts.to) {\r\n      return this.path(this.opts.to)\r\n    } else if (this.opts.from) {\r\n      return this.path(this.opts.from)\r\n    } else {\r\n      return 'to.css'\r\n    }\r\n  }\r\n\r\n  path(file) {\r\n    if (this.mapOpts.absolute) return file\r\n    if (file.charCodeAt(0) === 60 /* `<` */) return file\r\n    if (/^\\w+:\\/\\//.test(file)) return file\r\n    let cached = this.memoizedPaths.get(file)\r\n    if (cached) return cached\r\n\r\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\r\n\r\n    if (typeof this.mapOpts.annotation === 'string') {\r\n      from = dirname(resolve(from, this.mapOpts.annotation))\r\n    }\r\n\r\n    let path = relative(from, file)\r\n    this.memoizedPaths.set(file, path)\r\n\r\n    return path\r\n  }\r\n\r\n  previous() {\r\n    if (!this.previousMaps) {\r\n      this.previousMaps = []\r\n      if (this.root) {\r\n        this.root.walk(node => {\r\n          if (node.source && node.source.input.map) {\r\n            let map = node.source.input.map\r\n            if (!this.previousMaps.includes(map)) {\r\n              this.previousMaps.push(map)\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        let input = new Input(this.css, this.opts)\r\n        if (input.map) this.previousMaps.push(input.map)\r\n      }\r\n    }\r\n\r\n    return this.previousMaps\r\n  }\r\n\r\n  setSourcesContent() {\r\n    let already = {}\r\n    if (this.root) {\r\n      this.root.walk(node => {\r\n        if (node.source) {\r\n          let from = node.source.input.from\r\n          if (from && !already[from]) {\r\n            already[from] = true\r\n            let fromUrl = this.usesFileUrls\r\n              ? this.toFileUrl(from)\r\n              : this.toUrl(this.path(from))\r\n            this.map.setSourceContent(fromUrl, node.source.input.css)\r\n          }\r\n        }\r\n      })\r\n    } else if (this.css) {\r\n      let from = this.opts.from\r\n        ? this.toUrl(this.path(this.opts.from))\r\n        : '<no source>'\r\n      this.map.setSourceContent(from, this.css)\r\n    }\r\n  }\r\n\r\n  sourcePath(node) {\r\n    if (this.mapOpts.from) {\r\n      return this.toUrl(this.mapOpts.from)\r\n    } else if (this.usesFileUrls) {\r\n      return this.toFileUrl(node.source.input.from)\r\n    } else {\r\n      return this.toUrl(this.path(node.source.input.from))\r\n    }\r\n  }\r\n\r\n  toBase64(str) {\r\n    if (Buffer) {\r\n      return Buffer.from(str).toString('base64')\r\n    } else {\r\n      return window.btoa(unescape(encodeURIComponent(str)))\r\n    }\r\n  }\r\n\r\n  toFileUrl(path) {\r\n    let cached = this.memoizedFileURLs.get(path)\r\n    if (cached) return cached\r\n\r\n    if (pathToFileURL) {\r\n      let fileURL = pathToFileURL(path).toString()\r\n      this.memoizedFileURLs.set(path, fileURL)\r\n\r\n      return fileURL\r\n    } else {\r\n      throw new Error(\r\n        '`map.absolute` option is not available in this PostCSS build'\r\n      )\r\n    }\r\n  }\r\n\r\n  toUrl(path) {\r\n    let cached = this.memoizedURLs.get(path)\r\n    if (cached) return cached\r\n\r\n    if (sep === '\\\\') {\r\n      path = path.replace(/\\\\/g, '/')\r\n    }\r\n\r\n    let url = encodeURI(path).replace(/[#?]/g, encodeURIComponent)\r\n    this.memoizedURLs.set(path, url)\r\n\r\n    return url\r\n  }\r\n}\r\n\r\nmodule.exports = MapGenerator\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}